#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('api:server');
const http = require('http');

// Obtiene el puerto asignado por el sistema, si no existe asigna 3000
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Creacion del servidor
const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);
  return (isNaN(port)) ? val : ((port >= 0) ? port : false);
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = (typeof port === 'string') ? ('Pipe ' + port) : ('Port ' + port);

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = (typeof addr === 'string') ? ('pipe ' + addr) : ('port ' + addr.port);
  debug('Listening on ' + bind);
}
